package Application;

import java.util.*;

public class Scaling_Vlaues_Ai {
	
	// Function returns graph value based on count, magnitude, and previous graph value
	public static double Scaler(int count, double graph, double magnitude) {
		
		double scaler = 0.0;
		if (count  < 6 ) {
			scaler = .50;
		}
		else if(count < 11) {
			scaler = 1.0;
		}
		else if(count < 21) {
			scaler = 2.5;
		}
		else if(count < 51) {
			scaler = 5.0;
		}
		else if (count < 101) {
			scaler = 10.0;
		}
		else {
			scaler = 15.0;
		}
		graph += scaler * magnitude;

		if (graph <= -1.0) {
			//System.out.print("graph value is lower than the expected -1");
			return -1.0;
		}
		else if (graph >= 1.0) {
			//System.out.print("graph value is higher than the expected -1");
			return 1.0;
		}
		
		return graph;
	}
			
	// Main function
	public static void main(String[] args) {
		// TODO Auto-generated method stub
				
		//Scanner cin = new Scanner(System.in);  	<- should we delete unused variable?
		// Declare variables used to generate a random input value for this implementation
		Random rand = new Random();				// random variable generation
		int rand_item = 0;						// random value that is generated 
		Boolean rand_bool = false;				// random bool that determines if variable will be positive or negative
		Boolean rand_bool_2 = false;
		double rand_double = 0.00;				// double generated from rand_item 
		double initial_U = 1.02;				// possible initial value for the Universal currency
		Boolean[] checkNeg = new Boolean[2];	// array used to keep track of when a generated value changes sign (+ or -)
						
		int count = 0;							// counts how many times a positive or negative value shows up in a row
		double graph = 0.00;					// value between -1 and 1. based on scaler value and arr_U value
				
		double[] arr_U = new double[600];		// array holding values of currency at a given time 
				
		arr_U[0] = initial_U;		
			
		// Generate random values and update array with new values
		for (int i = 1; i < 600; i ++) {
				
			System.out.print(i + ".) ");

			rand_item = rand.nextInt(9);
			rand_double = (double)rand_item/1000;
			System.out.print("Rand_Double (magnitude) = " + rand_double + ",\t\t");
			rand_bool = rand.nextBoolean();
			rand_bool_2 = rand.nextBoolean();
					
			// Decide if this value will be negative or positive
			// trends:
			// to generate a positive trend 3/4 of the time use this condition in if statement: 
			//	rand_bool == true && rand_bool_2 == true
			// negative trend 3/4 of the time: 
			// 	rand_bool == true || rand_bool_2 == true
			// for half and half: 
			// 	rand_bool == true
			if(rand_bool == true) {
				System.out.print("Rand_Bool made this negative \t");
				rand_double = rand_double* -1;
				checkNeg[0] = checkNeg[1];
				checkNeg[1] = false;
			}
			else{
				System.out.print("Rand_Bool made this positive \t");
				checkNeg[0] = checkNeg[1];
				checkNeg[1] = true;
			}
				
			// Update count based on if the sign of the random value changed 
			if(checkNeg[0] == checkNeg[1]){
				count++;
			}
			else {
				count = 1;
			}
					
			// Set new value of graph by calling Scaler function
			graph = Scaler(count ,graph, rand_double);
			System.out.print("Count = "+ count + ",\t");
			System.out.print("Graph = "+ graph + ",\t\t");

			// New value for the currency is equal to previous value plus amount that changed (random in this case)
			arr_U[i] = arr_U[i-1] + rand_double;
			System.out.println("ArrayU[" + i + "] = " + arr_U[i]);
					
			
			}
		}
		// TODO Auto-generated method stub
}
